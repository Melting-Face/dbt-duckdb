---
x-airflow-common: &airflow-common
  image: ghcr.io/melting-face/dbt-duckdb:main
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
  depends_on: &airflow-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
    minio:
      condition: service_healthy
  environment: &airflow-environment
    AIRFLOW__CORE__LOAD_EXAMPLES: false
    AIRFLOW__DATABASE__LOAD_DEFAULT_CONNECTIONS: false
    AIRFLOW__CORE__TEST_CONNECTION: Enabled
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CELERY__RESULT_BACKEND:
      "db+postgresql://airflow:airflow@postgres/airflow"
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN:
      "postgresql+psycopg2://airflow:airflow@postgres/airflow"
    AIRFLOW__API__AUTH_BACKENDS:
      "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"
    AIRFLOW__COSMOS__DBT_DOCS_DIR: "s3://warehouse"
    AIRFLOW__COSMOS__DBT_DOCS_CONN_ID: "s3_conn_id"
    AIRFLOW__WEBSERVER__SHOW_TRIGGER_FORM_IF_NO_PARAMS: true
    AIRFLOW__LOGGING__REMOTE_LOGGING: true
    AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: "s3://airflow"
    AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: "s3_conn_id"
    TZ: Asia/Seoul
  platform: linux/amd64

services:
  airflow-webserver:
    container_name: airflow-webserver
    <<: *airflow-common
    ports:
      - "8080:8080"
    command: webserver
    environment:
      <<: *airflow-environment
      _AIRFLOW_DB_MIGRATE: true
      _AIRFLOW_WWW_USER_CREATE: true
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always

  airflow-scheduler:
    container_name: airflow-scheduler
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-depends-on
      airflow-webserver:
        condition: service_healthy

  airflow-triggerer:
    container_name: airflow-triggerer
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: [
        "CMD-SHELL",
        'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"'
      ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-depends-on
      airflow-webserver:
        condition: service_healthy

  airflow-worker:
    container_name: airflow-worker
    <<: *airflow-common
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-environment
      DUMB_INIT_SETSID: "0"
    depends_on:
      <<: *airflow-depends-on
      airflow-webserver:
        condition: service_healthy
    restart: always

  airflow-flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      <<: *airflow-depends-on
      airflow-webserver:
        condition: service_healthy
    restart: always

  minio:
    container_name: minio
    build: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      retries: 5
      start_period: 5s
    volumes:
      - ./data:/data
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin1234
    restart: always

  redis:
    container_name: redis
    image: redis:7.2
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  postgres:
    container_name: postgres
    image: postgres:13
    expose:
      - 5432
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./postgresql-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
